#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.10
# from Racc grammer file "".
#

require 'racc/parser.rb'

# $Id$
require './bashlex'
class Bash < Racc::Parser


  def parse(str)
    @q = []
    lex = Lexer.new(str)
    lex.run { |q| @q << q }
    do_parse
  end

  def next_token
    @q.shift
  end

  def q(s)
    if s =~ /\A['"]/
      s = s[1 ... -1]
    else
      s
    end
  end

##### State transition tables begin ###

racc_action_table = [
     6,     4,     9,    10,    13,     8,     4,     4,    16,    17,
    10,    10,    21 ]

racc_action_check = [
     1,     9,     3,     5,     6,     1,     7,     0,    10,    11,
    15,    16,    20 ]

racc_action_pointer = [
     1,     0,   nil,    -2,   nil,     0,     4,     0,   nil,    -5,
     6,     7,   nil,   nil,   nil,     7,     8,   nil,   nil,   nil,
    10,   nil ]

racc_action_default = [
   -11,   -14,    -1,    -4,   -10,    -5,   -14,   -11,    -3,   -11,
   -14,   -14,   -12,    22,    -2,    -5,    -5,    -8,   -13,    -6,
    -7,    -9 ]

racc_goto_table = [
    12,     2,    19,     7,     1,    20,    15,   nil,    14,   nil,
    18 ]

racc_goto_check = [
     6,     2,     5,     3,     1,     7,     8,   nil,     2,   nil,
     6 ]

racc_goto_pointer = [
   nil,     4,     1,     2,   nil,   -14,    -5,   -12,    -3 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     3,    11,   nil,   nil,     5 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 8, :_reduce_1,
  3, 8, :_reduce_2,
  1, 10, :_reduce_none,
  1, 9, :_reduce_none,
  0, 12, :_reduce_5,
  3, 12, :_reduce_6,
  3, 13, :_reduce_7,
  0, 14, :_reduce_8,
  2, 14, :_reduce_9,
  1, 15, :_reduce_10,
  0, 15, :_reduce_11,
  2, 11, :_reduce_12,
  4, 11, :_reduce_13 ]

racc_reduce_n = 14

racc_shift_n = 22

racc_token_table = {
  false => 0,
  :error => 1,
  :WORD => 2,
  :ASGNWORD => 3,
  :PIPE => 4,
  :NEWLINE => 5,
  "!" => 6 }

racc_nt_base = 7

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "WORD",
  "ASGNWORD",
  "PIPE",
  "NEWLINE",
  "\"!\"",
  "$start",
  "list",
  "command",
  "list_separator",
  "pipeline",
  "asgn_words",
  "simple",
  "arguments",
  "bang_or_none" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
 result = [val[0]] 
    result
end

def _reduce_2(val, _values, result)
 result = [*val[0], val[2]] 
    result
end

# reduce 3 omitted

# reduce 4 omitted

def _reduce_5(val, _values, result)
 result = [] 
    result
end

def _reduce_6(val, _values, result)
 result = [[val[0], q(val[1])], *val[2]] 
    result
end

def _reduce_7(val, _values, result)
 result = {type: :exec, assign: val[0], word: q(val[1]), arguments: val[2] } 
    result
end

def _reduce_8(val, _values, result)
 result = [] 
    result
end

def _reduce_9(val, _values, result)
 result = [*val[0], q(val[1])] 
    result
end

def _reduce_10(val, _values, result)
 result = true 
    result
end

def _reduce_11(val, _values, result)
 result = false 
    result
end

def _reduce_12(val, _values, result)
 result = [[val[0], val[1]]] 
    result
end

def _reduce_13(val, _values, result)
 result = [*val[0], [val[2], val[3]]] 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Bash


if $PROGRAM_NAME == __FILE__
  require 'pp'
  parser = Bash.new
  pp parser.parse("POSIXLY_CORRECT=1 ls -l user* test.file")
  pp parser.parse("cat | shuf | head; for i in `ls *.txt`;do echo \"Foo $i has 5 \\$\"; echo bar | grep --color=auto 'a'; done # This is a comment")
end
